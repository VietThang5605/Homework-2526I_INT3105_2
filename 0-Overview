- **Docker** là một nền tảng mã nguồn mở cho phép đóng gói ứng dụng cùng với tất cả các thành phần cần thiết (mã nguồn, thư viện, …) vào các đơn vị tiêu chuẩn hóa gọi là container. Giúp việc phát triển, vận chuyển và chạy ứng dụng một cách nhanh chóng.
- **Docker compose** là công cụ giúp định nghĩa và quản lý các ứng dụng đa container bằng một tệp cấu hình YAML duy nhất (thường là docker-compose.yml). Công cụ này cho phép thiết lập, chạy và quản lý các dịch vụ (services) cần thiết cho ứng dụng phức tạp chỉ bằng một lệnh duy nhất.
- Các thuật ngữ Linux, Unix, BSD, *nix đều là chỉ các hệ điều hành và các họ hệ điều hành liên quan chặt chẽ đến nhau.
- **Unix l**à hệ điều hành đa nhiệm, đa người dùng được phát triển tại Bell Labs vào những năm 1970, là "tổ tiên" và nguồn cảm hứng cho rất nhiều hệ điều hành sau này.
- ***nix (hay Unix-like):** Là một thuật ngữ chung để chỉ các hệ điều hành hoạt động tương tự như Unix. Đây là một "gia đình" lớn bao gồm cả các hậu duệ trực tiếp của Unix và các hệ thống được viết lại từ đầu nhưng tuân theo các nguyên tắc của Unix.
- **BSD (Berkeley Software Distribution):** Là một nhánh của gia đình *nix, được phát triển từ mã nguồn Unix gốc tại Đại học California, Berkeley. BSD là mã nguồn mở và có các phiên bản nổi tiếng như **FreeBSD**, **OpenBSD**.
- **Linux:** Là một **kernel** (nhân) của hệ điều hành được Linus Torvalds viết từ đầu vào năm 1991. Linux được thiết kế để tương thích và hoạt động giống Unix (tức là một hệ điều hành *nix) nhưng **không sử dụng mã nguồn của Unix gốc**. Khi kết hợp kernel Linux với các công cụ từ dự án GNU, chúng ta có một hệ điều hành hoàn chỉnh như **Ubuntu**, **Fedora**, **Debian**.
- **macOS** là hệ điều hành độc quyền của Apple dành cho các máy tính Mac, bao gồm MacBook, iMac, Mac mini và Mac Pro, được giới thiệu lần đầu vào năm 2001 với tên gọi [OS X](https://www.google.com/search?sca_esv=9c7398fcd2e3cee9&cs=0&sxsrf=AE3TifM5QiSyX2tsPv-XNDnpPr-oVf4_8g%3A1757822577809&q=OS+X&sa=X&ved=2ahUKEwjJqc6yr9ePAxUTkq8BHWUoLHcQxccNegQIAxAC&mstk=AUtExfBAgoeJxxbp5ewYCApKkLo_pkq0hz7-i82vW-gBt0c3v4Lsah61KwH9Ffj8kMJ4aouI_drQ15hRzgoldyYJXkdWyZv3F3AJVLbpd4uswEbx7x1rBXXMGOppLmbAO9P8MQk-9V6Qg2KDtmGnJ9aiJDpMkpar2ln8KTxETQDNfHuZnltBXmchqp5WK1mAZ4YTbTAuHPPCJ8W9RMUDJaGfZ2KQ42Hu6SqSop-h18ZV3_to8d-j4O6NcEaBgyVyyyL7HWZQG9_CpkN7x9BvdV6owAem&csui=3). macOS là một hệ điều hành được chứng nhận là Unix (UNIX 03 certified). Nền tảng của nó (được gọi là Darwin) được xây dựng dựa trên mã nguồn từ **BSD**, vì vậy nó vừa là hậu duệ của BSD, vừa thuộc gia đình *nix và là một hệ thống Unix chính thức.
- Alpine và Ubuntu là hai bản phân phối của Linux, rất phổ biến trong Docker. Sử khác biệt chính nằm ở triết lý thiết kế của chúng.
- **Alpine:** Kích thước cực kỳ nhỏ gọn (image docker cơ bản chỉ ~5MB). Tối giản và bảo mật. Chỉ bao gồm những gì thật sự cần thiết. Thư viện C sử dụng là musl libc (nhẹ và đơn giản). Công cụ shell sử dụng là BusyBox, một tệp thực thi duy nhất chứa các phiên bản rút gọn của nhiều tiện ích Unix. Trình quản lý gói apk (Alpine Package Keeper). Lý tưởng cho **container** và **hệ thống nhúng**, nơi kích thước nhỏ và bề mặt tấn công (attack surface) tối thiểu là ưu tiên hàng đầu.
- **Ubuntu:** Kích thước lớn hơn nhiều (image Docker cơ bản ~70MB trở lên). Đầy đủ tính năng và thân thiện. Cung cấp một môi trường hoàn chỉnh, dễ sử dụng. Sử dụng glibc (GNU C Library), thư viện tiêu chuẩn và phổ biến nhất. Sử dụng bộ công cụ **GNU coreutils** đầy đủ và mạnh mẽ. Sử dụng apt (Advanced Package Tool). Lý tưởng cho máy chủ đa dụng, máy tính để bàn, và khi cần sự tương thích phần mềm tối đa.
- **VNC** là một hệ thống chia sẻ màn hình đồ họa cho phép điều khiển một máy tính từ xa (máy chủ) thông qua một máy tính khác (máy khách) qua mạng, hoạt động dựa trên giao thức Remote FrameBuffer (RFB)
    - **Đặc điểm chính:**
        - **Đa nền tảng:** Bạn có thể dùng VNC viewer trên Windows để điều khiển một VNC server trên macOS hoặc Linux và ngược lại.
        - **Chia sẻ toàn bộ desktop:** Nó cho phép bạn thấy và tương tác với toàn bộ môi trường desktop của máy từ xa, như thể bạn đang ngồi ngay trước nó.
    - **Ứng dụng:** Thường được sử dụng cho việc hỗ trợ kỹ thuật từ xa, quản trị máy chủ có giao diện đồ họa, hoặc truy cập vào máy tính văn phòng từ nhà.
- Cách thức hoạt động của RFB:
    
    **1. Mô hình Client-Server:** Máy chủ RFB là máy tính từ xa mà bạn muốn điều khiển, còn máy khách RFB là thiết bị bạn sử dụng (máy tính, điện thoại) để kết nối đến máy chủ.
    
    **2. Truyền dữ liệu:** Máy chủ ghi lại các thay đổi trên màn hình của nó (bộ đệm khung hình - framebuffer) và gửi hình ảnh đến máy khách.
    
    **3. Điều khiển đầu vào:** Khi bạn thao tác trên máy khách (di chuyển chuột, gõ phím), các tín hiệu này sẽ được gửi đến máy chủ để thực hiện các lệnh tương ứng trên máy tính từ xa.